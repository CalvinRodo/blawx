- model: blawx.ruledoc
  pk: 3
  fields:
    ruledoc_name: Bird Act
    rule_text: "Bird Act\r\n\r\n1. A Penguin is a Bird.\r\n2. If a thing is a bird,
      it flies.\r\n3. Despite 2, a penguin does not fly."
    scasp_encoding: ''
- model: blawx.workspace
  pk: 20
  fields:
    ruledoc: 3
    workspace_name: root_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 21
  fields:
    ruledoc: 3
    workspace_name: sec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="gN~}:M?mP.QwU*v=NvX@" x="29" y="37"><statement name="statements"><block
      type="category_declaration" id="B+GuFFAB]X@X,auopp~*"><field name="category_name">bird</field><next><block
      type="category_declaration" id="Kv.V3s6d7cYC_!EWs0`*"><field name="category_name">penguin</field><next><block
      type="category_equivalence" id="7T_t=I4T[D~)ChXjr41z"><value name="first_category"><block
      type="category_selector" id="cjru:Z?qB`crE2Zb5@+n"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="penguin"></mutation><field name="category_name">penguin</field></block></value><value
      name="second_category"><block type="category_selector" id="{QjkF:;/JU@H*2+!5+!p"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="bird"></mutation><field
      name="category_name">bird</field></block></value></block></next></block></next></block></statement></block></xml>
    scasp_encoding: '#pred bird(X) :: ''@(X) is a bird''.

      #pred according_to(R,bird(X)) :: ''according to @(R), @(X) is a bird''.

      #pred legally_holds(_,bird(X)) :: ''it legally holds that @(X) is a bird''.

      #pred penguin(X) :: ''@(X) is a penguin''.

      #pred according_to(R,penguin(X)) :: ''according to @(R), @(X) is a penguin''.

      #pred legally_holds(_,penguin(X)) :: ''it legally holds that @(X) is a penguin''.

      bird(X) :-

      penguin(X).'
- model: blawx.workspace
  pk: 22
  fields:
    ruledoc: 3
    workspace_name: sec_2_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="/=rPZ$_-xcX*D.c])`RA" x="33" y="25"><statement name="statements"><block
      type="category_declaration" id=".v^nXwd-{|w!Ok7/]6`1"><field name="category_name">thing</field><next><block
      type="category_attribute" id="odJ72rcA(k64(_R:%hik"><value name="category"><block
      type="category_selector" id="X58N{Y*M2-T-Vu*KnJY?"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="thing"></mutation><field name="category_name">thing</field></block></value><statement
      name="attributes"><block type="attribute_declaration" id="=(`I%0lhRxRz/{@f.2k0"><mutation
      xmlns="http://www.w3.org/1999/xhtml" attribute_name="flies" attribute_type="CATEGORY"></mutation><field
      name="attribute_name">flies</field><value name="attribute_type"><block type="true_false_type_selector"
      id=",pp3(Oc;|BU)I39?u,4d"></block></value><next><block type="attribute_display"
      id="rX{2dAVO5%:c9B/hxt|m"><field name="order">vo</field><field name="prefix">it
      is</field><field name="first_element">value</field><field name="infix">that</field><field
      name="second_element">object</field><field name="postfix">flies</field></block></next></block></statement></block></next></block></statement></block><block
      type="unattributed_rule" id="}Ryn9fiE3VW@:%#J?:hp" x="32" y="254"><statement
      name="conditions"><block type="object_category" id="dBb}AEa%dea0)M`oE?,f"><value
      name="object"><block type="variable" id="HUc`vx;Il[.1jwG5w{u("><field name="variable_name">A</field></block></value><value
      name="category"><block type="category_selector" id=")WWqk#y$9+5Lv_NwrMQw"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="bird"></mutation><field
      name="category_name">bird</field></block></value></block></statement><statement
      name="conclusion"><block type="according_to" id="6a%+|6[ZnwV=PU(=Cj8d"><value
      name="rule"><block type="doc_selector" id="6|`)n6K;TlnJjgx[#z[z"><field name="doc_part_name">BA
      2</field></block></value><statement name="statement"><block type="attribute_selector"
      id="]pE{$7nc72o}5eTyfr+["><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="Checkmark True / False" attributeorder="vo"></mutation><field
      name="prefix">it is</field><field name="infix">that</field><field name="postfix">flies</field><value
      name="first_element"><block type="true_value" id="tu/2LyRJlb)~@@=dFcEg"></block></value><value
      name="second_element"><block type="variable" id=".$M_~`8znUf+0F_#Fc3Y"><field
      name="variable_name">A</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: '#pred thing(X) :: ''@(X) is a thing''.

      #pred according_to(R,thing(X)) :: ''according to @(R), @(X) is a thing''.

      #pred legally_holds(_,thing(X)) :: ''it legally holds that @(X) is a thing''.

      #pred flies(Y,X) :: ''it is @(X) that @(Y) flies''.

      #pred according_to(R,flies(Y,X)) :: ''according to @(R), it is @(X) that @(Y)
      flies''.

      #pred legally_holds(_,flies(Y,X)) :: ''it legally holds that it is @(X) that
      @(Y) flies''.

      opposes(flies(X,true),flies(X,false)).

      opposes(flies(X,false),flies(X,true)).



      according_to(ba__2_end,  flies(A,true)) :-

      bird(A).'
- model: blawx.workspace
  pk: 23
  fields:
    ruledoc: 3
    workspace_name: sec_3_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="gQ$Vo/y%X7t_AIj]#MQ5" x="44" y="33"><statement name="statements"><block
      type="overrules" id="Q;r403KpUBqe7a-c]^g2"><value name="defeating_rule"><block
      type="doc_selector" id="00JUdspJG@ZvY@Sf.ze="><field name="doc_part_name">BA
      3</field></block></value><value name="defeated_rule"><block type="doc_selector"
      id="hC.cd~(Ni(~,/q=?5`hH"><field name="doc_part_name">BA 2</field></block></value></block></statement></block><block
      type="unattributed_rule" id="nYUW@13WKx$7J[o!.;31" x="46" y="112"><statement
      name="conditions"><block type="object_category" id="6+g}d-K7+YA:N:ZriAal"><value
      name="object"><block type="variable" id="l?TPM/6NjhWvD3FHa;?d"><field name="variable_name">A</field></block></value><value
      name="category"><block type="category_selector" id="tl0;S,#(sEB#fFwk|jW;"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="penguin"></mutation><field
      name="category_name">penguin</field></block></value></block></statement><statement
      name="conclusion"><block type="according_to" id="T,mpb69rN]R[PpbYkXC7"><value
      name="rule"><block type="doc_selector" id="Erz:Dp%!=*`8PZu1dK)D"><field name="doc_part_name">BA
      3</field></block></value><statement name="statement"><block type="attribute_selector"
      id="SHN;Hu9oBh|gd!*nxV6f"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="Checkmark True / False" attributeorder="vo"></mutation><field
      name="prefix">it is</field><field name="infix">that</field><field name="postfix">flies</field><value
      name="first_element"><block type="false_value" id="NmoECeQPU.b,ZEex@o},"></block></value><value
      name="second_element"><block type="variable" id="@p2YWiY7(k6nm5SLrbcX"><field
      name="variable_name">A</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'overrules(ba__3_end,ba__2_end).


      according_to(ba__3_end,  flies(A,false)) :-

      penguin(A).'
- model: blawx.blawxtest
  pk: 3
  fields:
    ruledoc: 3
    test_name: tweety
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="fS*Hx(?aSJzDl_[z}4+e" x="46" y="27"><statement name="statements"><block
      type="object_declaration" id="#ECeq5_*#ES:XL)O:y.d"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="penguin" prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">tweety</field><field name="postfix">is a penguin</field></block></statement></block><block
      type="query" id="qbI@!z}]i{$s=kwN}yF{" x="45" y="99"><statement name="query"><block
      type="holds" id="9M5d/QdH8py!=$9cw|cI"><statement name="statement"><block type="attribute_selector"
      id="6k[=ARE9s8Iv9v19Li`3"><mutation xmlns="http://www.w3.org/1999/xhtml" attributename="flies"
      attributetype="Checkmark True / False" attributeorder="vo"></mutation><field
      name="prefix">it is</field><field name="infix">that</field><field name="postfix">flies</field><value
      name="first_element"><block type="variable" id="oKv0e36S%94P}QcE!RCk"><field
      name="variable_name">A</field></block></value><value name="second_element"><block
      type="object_selector" id="OraP~dRJB`]T@^iQzB*z"><mutation xmlns="http://www.w3.org/1999/xhtml"
      objectname="tweety"></mutation><field name="object_name">tweety</field></block></value></block></statement></block></statement></block></xml>
    scasp_encoding: 'penguin(tweety).


      ?- legally_holds(_,  flies(tweety,A)).'