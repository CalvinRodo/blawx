- model: blawx.ruledoc
  pk: 5
  fields:
    ruledoc_name: Mortality Act
    rule_text: "Mortality Act\r\n\r\n1. Humans are mortal."
    scasp_encoding: ''
    tutorial: ''
- model: blawx.workspace
  pk: 45
  fields:
    ruledoc: 5
    workspace_name: root_section
    xml_content: ''
    scasp_encoding: ''
- model: blawx.workspace
  pk: 46
  fields:
    ruledoc: 5
    workspace_name: sec_1_section
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="z|*~jnplHM7KQUaYz%2f" x="29" y="35"><statement name="statements"><block
      type="category_declaration" id="As(vTz@Wf*]n|v=!sUyR"><field name="category_name">human</field><next><block
      type="category_declaration" id="z@i/QYTi0y0:WA5Qo`Vo"><field name="category_name">mortal</field><next><block
      type="category_equivalence" id="@=^q)%UV;wPrCwW%dpKq"><value name="first_category"><block
      type="category_selector" id="kQpqQFujEW4L^ww.F*.H"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="human"></mutation><field name="category_name">human</field></block></value><value
      name="second_category"><block type="category_selector" id="BzQv[qTObk,WBHCXrRrx"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="mortal"></mutation><field
      name="category_name">mortal</field></block></value></block></next></block></next></block></statement></block></xml>
    scasp_encoding: 'blawx_category(human).

      #pred human(X) :: ''@(X) is a human''.

      #pred according_to(R,human(X)) :: ''according to @(R), @(X) is a human''.

      #pred legally_holds(_,human(X)) :: ''it legally holds that @(X) is a human''.

      blawx_category(mortal).

      #pred mortal(X) :: ''@(X) is a mortal''.

      #pred according_to(R,mortal(X)) :: ''according to @(R), @(X) is a mortal''.

      #pred legally_holds(_,mortal(X)) :: ''it legally holds that @(X) is a mortal''.

      mortal(X) :-

      human(X).'
- model: blawx.blawxtest
  pk: 4
  fields:
    ruledoc: 5
    test_name: Socrates
    xml_content: <xml xmlns="https://developers.google.com/blockly/xml"><block type="unattributed_fact"
      id="2dUMwN4jMd,pJT=*{sI{" x="80" y="40"><statement name="statements"><block
      type="object_declaration" id="(CqEDRPd^5?N@~C.qu)b"><mutation xmlns="http://www.w3.org/1999/xhtml"
      category_name="human" prefix="null" postfix="null"></mutation><field name="prefix"></field><field
      name="object_name">socrates</field><field name="postfix">is a human</field></block></statement></block><block
      type="query" id="p*7^*eHhML#HIBn-DNEX" x="69" y="110"><statement name="query"><block
      type="object_category" id="o1Kuj.rO:*+k9+cX27*("><value name="object"><block
      type="variable" id="xWU1}ck_/p`2mZ|X!d3P"><field name="variable_name">Anything</field></block></value><value
      name="category"><block type="category_selector" id="e6zO-d;]DEO(!3}hN+~1"><mutation
      xmlns="http://www.w3.org/1999/xhtml" category_name="mortal"></mutation><field
      name="category_name">mortal</field></block></value></block></statement></block></xml>
    scasp_encoding: 'human(socrates).


      ?- mortal(Anything).'
